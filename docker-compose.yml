services:

  postgres-db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: AgregadorDB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d AgregadorDB"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - rede

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq_service
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
    networks:
      - rede

  agregador-node:
    build: ./
    container_name: agregador_node_app
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/AgregadorDB
      SPRING_DATASOURCE_USERNAME: postgres #aqui cada grupo troca para colocar suas credenciais do banco
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      NODES_API_KEY: minha-chave-api
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: senhaForteParaAdmin123
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,loggers,beans
      MANAGEMENT_ENDPOINT_HEALTH_SHOW-DETAILS: always
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - rede

volumes:
  postgres_data:

networks:
  rede:
    external: true